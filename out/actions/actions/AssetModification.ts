
import BaseType, { FixedChar3, UInt32 } from "./../../Base";
import Amendment from "./../../actions/types/Amendment";

/**
 * ### Asset Modification ###
 * Token Dilutions, Call Backs/Revocations, burning etc.
 */
class AssetModification extends BaseType {

  constructor() {
    super();
    super.requiredFieldNames = [  ];
    super.fieldNames = [ "AssetType", "AssetCode", "AssetRevision", "Amendments", "RefTxID" ];
  }

  public validate() {
    super.validateAllFields();
  }

  
  private _AssetType: FixedChar3;
  /**
   * # Asset Type #
   * Three letter character that specifies the asset type.
   */
  public set AssetType(val: string) {
    this._AssetType = new FixedChar3(val);
    this._AssetType.validate();
  }
  public get AssetType() : string {
    return this._AssetType.value;
  }

  private _AssetCode: AssetCode;
  /**
   * # Asset Code #
   * A unique code that is used to identify the asset. It is generated by hashing the contract public key hash and the asset index. SHA256(contract PKH + asset index)
   */
  public set AssetCode(val: AssetCode) {
    this._AssetCode = val;
    this._AssetCode.validate();
  }
  public get AssetCode() : AssetCode {
    // TODO: implement this unsupported scenario
  }

  private _AssetRevision: UInt32;
  /**
   * # Asset Revision #
   * The current revision figure to ensure the modification provided is based on the latest version.
   */
  public set AssetRevision(val: number) {
    this._AssetRevision = new UInt32(val);
    this._AssetRevision.validate();
  }
  public get AssetRevision() : number {
    return this._AssetRevision.value;
  }

  private _Amendments: Amendment[];
  /**
   * # Amendments #
   * A collection of modifications to perform on this asset.
   */
  public set Amendments(val: Amendment[]) {
    this._Amendments = val;
    this._Amendments.forEach(i => i.validate());
  }
  public get Amendments() : Amendment[] {
    return this._Amendments;
  }

  private _RefTxID: TxId;
  /**
   * # Ref Tx ID #
   * The Bitcoin transaction ID of the associated result action that permitted the modifications. See Governance for more details.
   */
  public set RefTxID(val: TxId) {
    this._RefTxID = val;
    this._RefTxID.validate();
  }
  public get RefTxID() : TxId {
    // TODO: implement this unsupported scenario
  }
}

export default AssetModification;