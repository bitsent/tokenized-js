
import BaseType, { UInt16, FixedChar3 } from "./../../Base";
import QuantityIndex from "./../../actions/types/QuantityIndex";

/**
 * ### Asset Settlement ###
 * AssetSettlement is the data required to settle an asset transfer.
 */
class AssetSettlement extends BaseType {

  constructor() {
    super();
    super.requiredFieldNames = [  ];
    super.fieldNames = [ "ContractIndex", "AssetType", "AssetCode", "Settlements" ];
  }

  public validate() {
    super.validateAllFields();
  }

  
  private _ContractIndex: UInt16;
  /**
   * # Contract Index #
   * Index of input containing the contract's address for this offset
   */
  public set ContractIndex(val: number) {
    this._ContractIndex = new UInt16(val);
    this._ContractIndex.validate();
  }
  public get ContractIndex() : number {
    return this._ContractIndex.value;
  }

  private _AssetType: FixedChar3;
  /**
   * # Asset Type #
   * Three letter character that specifies the asset type. Example: COU
   */
  public set AssetType(val: string) {
    this._AssetType = new FixedChar3(val);
    this._AssetType.validate();
  }
  public get AssetType() : string {
    return this._AssetType.value;
  }

  private _AssetCode: AssetCode;
  /**
   * # Asset Code #
   * A unique code that is used to identify the asset. It is generated by hashing the contract public key hash and the asset index. SHA256(contract PKH + asset index)
   */
  public set AssetCode(val: AssetCode) {
    this._AssetCode = val;
    this._AssetCode.validate();
  }
  public get AssetCode() : AssetCode {
    // TODO: implement this unsupported scenario
  }

  private _Settlements: QuantityIndex[];
  /**
   * # Settlements[] #
   * Each element contains the resulting token balance of Asset X for the output Address, which is referred to by the index.
   */
  public set Settlements(val: QuantityIndex[]) {
    this._Settlements = val;
    this._Settlements.forEach(i => i.validate());
  }
  public get Settlements() : QuantityIndex[] {
    return this._Settlements;
  }
}

export default AssetSettlement;